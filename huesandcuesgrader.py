import math
from PIL import Image
from datetime import datetime
import urllib.request
import base64
import json
import time
import os
import glob

webui_server_url = 'http://127.0.0.1:7860'

out_dir = 'api_out'
out_dir_t2i = os.path.join(out_dir, 'txt2img')
os.makedirs(out_dir_t2i, exist_ok=True)


def timestamp():
	return datetime.fromtimestamp(time.time()).strftime("%Y%m%d-%H%M%S")


def encode_file_to_base64(path):
	with open(path, 'rb') as file:
		return base64.b64encode(file.read()).decode('utf-8')


def decode_and_save_base64(base64_str, save_path):
	with open(save_path, "wb") as file:
		file.write(base64.b64decode(base64_str))


def call_api(api_endpoint, **payload):
	data = json.dumps(payload).encode('utf-8')
	request = urllib.request.Request(
		f'{webui_server_url}/{api_endpoint}',
		headers={'Content-Type': 'application/json'},
		data=data,
	)
	response = urllib.request.urlopen(request)
	return json.loads(response.read().decode('utf-8'))


def call_txt2img_api(**payload):
	response = call_api('sdapi/v1/txt2img', **payload)
	for index, image in enumerate(response.get('images')):
		save_path = os.path.join(out_dir_t2i, f'txt2img-{timestamp()}-{index}.png')
		decode_and_save_base64(image, save_path)

playerguess = input("Enter the word(s) you guessed: ")
payload = {
"alwayson_scripts": {
		"LayerDiffuse": {
			"args": [
				True,
				"(SDXL) Only Generate Transparent Image (Attention Injection)",
				1,
				1,
				None,
				None,
				None,
				"Crop and Resize",
				False,
				"",
				"",
				""
			]
		}
	},
"batch_size" : 10,
"cfg_scale" : 7,
"denoising_strength" : 0.7,
"disable_extra_networks" : False,
"do_not_save_grid" : False,
"do_not_save_samples" : False,
"enable_hr" : False,
"height" : 512,
"hr_negative_prompt" : "",
"hr_prompt" : "",
"hr_resize_x" : 0,
"hr_resize_y" : 0,
"hr_scale" : 2,
"hr_second_pass_steps" : 0,
"hr_upscaler" : "Latent",
"n_iter" : 1,
"negative_prompt" : "",
"override_settings" : { },
"override_settings_restore_afterwards" : True,
"prompt" : f"{playerguess}",
"restore_faces" : False,
"s_churn" : 0,
"s_min_uncond" : 0,
"s_noise" : 1,
"s_tmax" : None,
"s_tmin" : 0,
"sampler_name" : "DPM++ 2M Karras",
"script_args" : [ ],
"script_name" : None,
"seed" : -1,
"seed_enable_extras" : True,
"seed_resize_from_h" : -1,
"seed_resize_from_w" : -1,
"steps" : 20,
"styles" : [ ],
"subseed" : -1,
"subseed_strength" : 0,
"tiling" : False,
"width" : 512
}
call_txt2img_api(**payload)

# Define the folder path
folder_path = './api_out/txt2img'

files = os.listdir(folder_path)

for file_name in files:
    if file_name.endswith(('-1.png', '-2.png', '-3.png', '-4.png', '-5.png', '-6.png', '-7.png', '-8.png', '-9.png')):
        file_path = os.path.join(folder_path, file_name)
        os.remove(file_path)

files = os.listdir(folder_path)

for i, filename in enumerate(files, start=1):
    new_filename = f'image{i}.png'
    old_filepath = os.path.join(folder_path, filename)
    new_filepath = os.path.join(folder_path, new_filename)
    os.rename(old_filepath, new_filepath)
def color_difference(color1, color2):
	distance = math.sqrt(sum([(c2 - c1) ** 2 for c1, c2 in zip(color1, color2)]))
	
	max_distance = math.sqrt(3 * (255 ** 2))  
	difference_percentage = (distance / max_distance) * 100
	
	return difference_percentage

colors = [
	[(95,44,17), (108,39,21), (118,34,23), (132,31,26), (148,30,30), (159,28,33), (175,32,36), (197,33,40), (225,31,39), (237,32,39), (237,32,39), (237,30,40), (236,31,48), (237,30,60), (235,30,71), (230,27,83), (227,21,103), (227,21,103), (216,14,132), (216,14,132), (201,40,144), (187,47,144), (178,51,146), (169,56,148), (159,56,148), (147,58,150), (140,61,152), (132,62,151), (125,62,151), (115,66,155)],
	[(136,75,31), (148,70,34), (157,64,33), (174,64,37), (187,56,38), (199,46,40), (212,40,38), (229,34,38), (237,39,38), (240,61,64), (238,43,51), (236,39,59), (237,33,68), (236,35,79), (237,31,95), (237,25,111), (237,20,124), (229,20,140), (218,46,146), (206,57,149), (190,62,149), (179,63,152), (169,60,149), (159,63,152), (151,63,150), (141,62,151), (133,63,152), (123,63,151), (113,63,152), (105,60,151)],
	[(166,97,40), (173,90,38), (187,90,39), (194,79,40), (206,73,40), (213,63,38), (225,58,39), (234,52,38), (237,56,45), (240,61,64), (238,64,77), (239,61,83), (238,60,94), (236,52,102), (238,51,122), (237,47,135), (233,54,148), (218,69,153), (201,74,155), (187,76,155), (179,74,156), (166,73,154), (159,70,154), (149,69,154), (140,68,154), (133,63,151), (121,62,152), (113,63,152), (103,58,149), (92,48,145)],
	[(202,131,43), (216,129,40), (219,118,40), (233,121,39), (230,105,37), (233,94,37), (241,95,44), (241,87,49), (240,79,61), (240,87,81), (240,95,102), (241,93,107), (240,88,113), (240,83,126), (239,81,140), (240,79,157), (222,86,160), (205,88,159), (189,93,164), (181,87,161), (166,85,162), (156,79,159), (148,77,157), (139,74,156), (131,69,154), (123,66,152), (111,62,153), (102,57,150), (89,52,148), (72,47,138)],
	[(231,157,36), (241,152,32), (248,147,31), (247,141,31), (246,134,35), (243,120,44), (242,120,61), (242,111,69), (243,112,84), (242,119,103), (242,119,103), (241,118,137), (240,112,147), (239,104,162), (230,112,170), (212,114,173), (198,112,173), (185,113,176), (173,104,171), (157,96,166), (147,89,165), (141,84,161), (133,80,160), (122,73,155), (110,70,156), (102,63,152), (88,53,147), (74,49,143), (51,47,132)],
	[(252,179,23), (252,177,32), (250,171,42), (250,170,57), (251,168,64), (250,164,77), (246,151,85), (249,163,110), (246,136,99), (244,136,115), (245,143,131), (245,143,144), (245,143,155), (243,141,163), (241,135,181), (226,140,187), (209,140,187), (198,140,190), (186,131,186), (170,122,180), (156,116,179), (145,104,172), (135,95,166), (116,81,161), (99,74,157), (91,67,153), (76,52,146), (55,49,139), (47,45,120)],
	[(250,192,23), (253,192,41), (251,182,42), (251,180,56), (252,186,92), (249,171,86), (250,170,101), (249,163,110), (248,163,122), (247,160,133), (247,159,149), (247,158,154), (247,157,165), (245,154,169), (243,157,194), (226,164,201), (209,167,205), (207,174,209), (178,170,210), (167,138,192), (154,130,188), (139,119,182), (129,109,178), (113,100,172), (104,93,169), (90,85,165), (79,75,159), (67,67,155), (50,57,148)],
	[(252,208,25), (255,206,41), (255,200,48), (255,200,64), (255,199,74), (251,189,86), (252,187,95), (251,185,107), (250,179,121), (250,176,131), (249,174,142), (248,177,157), (244,181,172), (241,181,179), (236,181,200), (217,182,214), (205,184,217), (203,190,220), (180,170,212), (167,159,206), (151,148,201), (132,137,195), (117,125,187), (106,117,183), (92,106,177), (83,97,170), (72,90,166), (62,80,162), (46,71,154)],
	[(253,223,15), (252,220,39), (251,218,53), (253,217,67), (252,221,77), (252,214,87), (252,218,95), (252,216,106), (246,220,125), (241,224,144), (237,222,157), (232,225,179), (224,223,193), (217,225,202), (210,223,213), (201,221,228), (195,217,241), (192,216,240), (165,199,234), (154,185,224), (137,171,217), (120,161,213), (100,167,219), (92,151,209), (87,120,187), (77,110,181), (66,98,171), (60,91,170), (50,81,162)],
	[(248,236,36), (248,234,40), (249,234,53), (246,237,74), (248,238,81), (249,238,96), (246,239,109), (238,235,132), (231,235,141), (222,233,157), (217,232,175), (213,231,191), (210,233,205), (206,229,209), (199,230,214), (188,228,228), (180,226,241), (178,227,247), (158,220,243), (136,213,245), (126,198,238), (113,181,228), (100,167,219), (92,151,209), (81,139,200), (74,125,191), (66,110,181), (58,101,177), (55,92,171), (49,82,162)],
	[(242,234,63), (244,236,67), (244,236,75), (242,234,84), (240,235,92), (236,232,106), (229,232,125), (223,231,132), (214,228,133), (202,224,141), (190,221,153), (180,217,163), (180,219,174), (177,218,184), (175,219,194), (174,221,213), (169,220,223), (168,221,225), (153,216,231), (138,212,237), (115,207,244), (101,202,244), (97,188,234), (91,169,218), (83,156,214), (69,137,200), (62,125,192), (60,110,181), (57,100,176), (54,93,171)],
	[(240,234,36), (238,233,45), (234,232,52), (232,231,63), (229,231,70), (221,226,84), (208,223,98), (194,218,106), (178,213,109), (167,210,118), (159,208,127), (151,207,136), (147,206,152), (142,204,155), (144,206,165), (141,207,179), (142,209,192), (142,210,197), (131,207,203), (122,205,211), (107,203,218), (87,200,224), (58,197,238), (61,187,237), (61,170,225), (60,153,212), (64,136,198), (56,121,189), (60,110,181), (54,102,177)],
	[(222,227,39), (219,225,41), (215,223,49), (209,222,55), (200,219,67), (184,213,69), (174,210,78), (159,205,81), (147,201,89), (137,199,98), (121,196,104), (114,193,112), (111,194,124), (108,194,131), (110,195,138), (113,197,148), (112,197,158), (118,199,167), (117,200,172), (107,198,180), (97,197,187), (86,196,195), (72,196,208), (50,194,220), (25,185,227), (29,170,226), (44,157,215), (58,142,206), (47,126,193), (45,115,185)],
	[(196,215,46), (188,213,49), (180,212,53), (169,207,58), (161,205,58), (149,201,64), (128,195,66), (121,192,67), (109,190,70), (93,181,71), (84,180,73), (78,178,82), (72,183,89), (73,184,105), (81,187,115), (88,188,124), (91,190,126), (93,190,135), (95,192,139), (95,190,146), (91,193,157), (81,193,171), (71,191,179), (57,190,195), (46,192,207), (20,185,215), (17,175,222), (29,164,223), (33,149,212), (38,131,198)],
	[(158,196,59), (153,194,62), (149,192,61), (136,191,64), (128,188,66), (107,179,69), (97,177,70), (84,167,72), (80,165,70), (62,158,71), (54,156,72), (48,163,72), (41,171,75), (42,177,74), (47,181,84), (54,181,92), (67,183,100), (70,185,110), (74,186,112), (83,187,118), (82,189,133), (75,188,144), (74,189,158), (64,190,169), (48,189,181), (42,191,198), (29,189,211), (10,179,212), (5,167,219), (24,159,217)],
	[(123,165,65), (118,169,64), (110,168,68), (99,163,67), (88,165,71), (75,160,69), (65,153,69), (56,149,69), (38,145,69), (30,137,67), (19,139,68), (16,144,69), (19,155,73), (23,161,75), (26,170,74), (32,177,76), (49,179,73), (52,181,88), (57,179,92), (65,182,101), (66,184,110), (58,183,123), (49,185,139), (45,185,150), (38,186,162), (28,186,172), (31,187,186), (3,189,201), (4,183,214), (15,176,222)]
]
row_mapping = {chr(97 + i): i for i in range(16)}  # Mapping from a to p
column_mapping = {str(i): i - 1 for i in range(1, 30)}  # Mapping from 1 to 30

row_letter = input("Enter the row letter (a-p): ")
column_number = input("Enter the column number (1-30): ")

row_index = row_mapping.get(row_letter)
column_index = column_mapping.get(column_number)
def calculate_average_color(image_path):
	img = Image.open(image_path)
	img = img.convert("RGB")
	img_data = img.getdata()

	total_red = 0
	total_green = 0
	total_blue = 0
	total_pixels = 0

	for r, g, b in img_data:
		total_red += r
		total_green += g
		total_blue += b
		total_pixels += 1

	avg_red = total_red / total_pixels
	avg_green = total_green / total_pixels
	avg_blue = total_blue / total_pixels

	return (avg_red, avg_green, avg_blue)

if row_index is not None and column_index is not None:
	color1 = colors[row_index][column_index]
	counter = 10
	runningtotal = 0
	while (counter != 0):
		image_path = f"./api_out/txt2img/image{counter}.png"
		color2 = calculate_average_color(image_path)
		percentage = color_difference(color1, color2)
		percentage = 100 - percentage
		runningtotal = runningtotal + percentage
		counter = counter - 1
	percentage = runningtotal / 10
	print(f"These colors are {percentage:.2f}% similar")
else:
	print("Invalid row or column input.")
input("Press Enter to exit...")